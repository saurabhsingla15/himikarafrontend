"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const heroku_cli_util_1 = require("heroku-cli-util");
const graphql_1 = require("graphql");
const git_1 = require("../../git");
const Command_1 = require("../../Command");
class ServicePush extends Command_1.ProjectCommand {
    async run() {
        let result;
        let gitContext;
        await this.runTasks(({ flags, project, config }) => [
            {
                title: "Uploading service to Engine",
                task: async () => {
                    if (!config.name) {
                        throw new Error("No service found to link to Engine");
                    }
                    const schema = await project.resolveSchema({ tag: flags.tag });
                    gitContext = await git_1.gitInfo(this.log);
                    const variables = {
                        id: config.name,
                        schema: graphql_1.introspectionFromSchema(schema).__schema,
                        tag: flags.tag,
                        gitContext
                    };
                    const { schema: _ } = variables, restVariables = __rest(variables, ["schema"]);
                    this.debug("Variables sent to Engine:");
                    this.debug(restVariables);
                    this.debug("SDL of introspection sent to Engine:");
                    this.debug(graphql_1.printSchema(schema));
                    const response = await project.engine.uploadSchema(variables);
                    if (response) {
                        result = {
                            service: config.name,
                            hash: response.tag ? response.tag.schema.hash : null,
                            tag: response.tag ? response.tag.tag : null,
                            code: response.code
                        };
                    }
                }
            }
        ]);
        this.log("\n");
        if (result.code === "NO_CHANGES") {
            this.log("No change in schema from previous version\n");
        }
        heroku_cli_util_1.table([result], {
            columns: [
                {
                    key: "hash",
                    label: "id",
                    format: (hash) => hash.slice(0, 6)
                },
                { key: "service", label: "schema" },
                { key: "tag" }
            ]
        });
        this.log("\n");
    }
}
ServicePush.aliases = ["schema:publish"];
ServicePush.description = "Push a service to Engine";
ServicePush.flags = Object.assign({}, Command_1.ProjectCommand.flags, { tag: command_1.flags.string({
        char: "t",
        description: "The tag to publish this service to",
        default: "current"
    }), localSchemaFile: command_1.flags.string({
        description: "Path to your local GraphQL schema file (introspection result or SDL)"
    }) });
exports.default = ServicePush;
//# sourceMappingURL=push.js.map